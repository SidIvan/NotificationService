// Code generated by MockGen. DO NOT EDIT.
// Source: NotificationService/internal/repo (interfaces: ClientRepoInterface)

// Package repo is a generated GoMock package.
package repo

import (
	dto "NotificationService/internal/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClientRepoInterface is a mock of ClientRepoInterface interface.
type MockClientRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientRepoInterfaceMockRecorder
}

// MockClientRepoInterfaceMockRecorder is the mock recorder for MockClientRepoInterface.
type MockClientRepoInterfaceMockRecorder struct {
	mock *MockClientRepoInterface
}

// NewMockClientRepoInterface creates a new mock instance.
func NewMockClientRepoInterface(ctrl *gomock.Controller) *MockClientRepoInterface {
	mock := &MockClientRepoInterface{ctrl: ctrl}
	mock.recorder = &MockClientRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientRepoInterface) EXPECT() *MockClientRepoInterfaceMockRecorder {
	return m.recorder
}

// CreateClient mocks base method.
func (m *MockClientRepoInterface) CreateClient(arg0 *dto.Client) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockClientRepoInterfaceMockRecorder) CreateClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockClientRepoInterface)(nil).CreateClient), arg0)
}

// DeleteClient mocks base method.
func (m *MockClientRepoInterface) DeleteClient(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteClient", arg0)
}

// DeleteClient indicates an expected call of DeleteClient.
func (mr *MockClientRepoInterfaceMockRecorder) DeleteClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClient", reflect.TypeOf((*MockClientRepoInterface)(nil).DeleteClient), arg0)
}

// FindClient mocks base method.
func (m *MockClientRepoInterface) FindClient(arg0 string) *dto.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClient", arg0)
	ret0, _ := ret[0].(*dto.Client)
	return ret0
}

// FindClient indicates an expected call of FindClient.
func (mr *MockClientRepoInterfaceMockRecorder) FindClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClient", reflect.TypeOf((*MockClientRepoInterface)(nil).FindClient), arg0)
}

// FindClientsByFilter mocks base method.
func (m *MockClientRepoInterface) FindClientsByFilter(arg0 *dto.Filter) *[]dto.ClientWithId {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClientsByFilter", arg0)
	ret0, _ := ret[0].(*[]dto.ClientWithId)
	return ret0
}

// FindClientsByFilter indicates an expected call of FindClientsByFilter.
func (mr *MockClientRepoInterfaceMockRecorder) FindClientsByFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClientsByFilter", reflect.TypeOf((*MockClientRepoInterface)(nil).FindClientsByFilter), arg0)
}

// IsClientExist mocks base method.
func (m *MockClientRepoInterface) IsClientExist(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClientExist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClientExist indicates an expected call of IsClientExist.
func (mr *MockClientRepoInterfaceMockRecorder) IsClientExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClientExist", reflect.TypeOf((*MockClientRepoInterface)(nil).IsClientExist), arg0)
}

// UpdateClient mocks base method.
func (m *MockClientRepoInterface) UpdateClient(arg0 string, arg1 *dto.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateClient", arg0, arg1)
}

// UpdateClient indicates an expected call of UpdateClient.
func (mr *MockClientRepoInterfaceMockRecorder) UpdateClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClient", reflect.TypeOf((*MockClientRepoInterface)(nil).UpdateClient), arg0, arg1)
}
